openapi: 3.0.0
info:
  title: OpenAPI спецификация списка задач
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.0.1
servers:
  - url: http://localhost:8080/api/v1/
    description: Dev server

paths:
  /todo-lists:
    get:
      summary: Метод получения списка задач
      description: Метод предназначен для получения списка всех задач, сохраненных в БД.
      operationId: getTodolist
      tags:
        - todo-lists
      responses:
        '200':
          "description": Список задач
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/todo-lists"
        default:
          description: Любая неожиданная ошибка
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Метод добавления новой игрушки в каталог
      description: Метод предназначен для сохранения в БД данных по новой игрушке.
      operationId: createTodolist
      tags:
        - Toy
      requestBody:
        required: true
        content:
          'application/json':
            schema:
              $ref: "#/components/schemas/todo-lists"
      responses:
        '200':
          "description": Подтверждение успешного сохранения
          content:
            application/json:
              schema:
              $ref: "#/components/schemas/todo-lists"

        '400':
          "description": Некорректные входные данные. Возвращает список атрибутов с ошибками
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        default:
          description: Любая неожиданная ошибка
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

    put:
      summary: Метод обновления задачи в списке
      description: Метод предназначен для обновления в БД данных по имеющейся задаче.
      operationId: updateTodolist
      tags:
       - todo-lists
      parameters:
        - name: id
          in: path
          required: true
          description: Идентификатор игрушки
          schema:
            type: string
      requestBody:
        required: true
        content:
          'application/json':
            schema:
            $ref: "#/components/schemas/todo-lists"
      responses:
        '200':
          "description": Подтверждение успешного обновления
          content:
            application/json:
              schema:
          $ref: "#/components/schemas/todo-lists"
        '400':
          "description": Некорректные входные данные. Возвращает список атрибутов с ошибками
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        default:
          description: Любая неожиданная ошибка
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: Метод удаления игрушки по идентификатору
      operationId: deleteTodolistById
      tags:
        - todo-lists
      parameters:
        - name: id
          in: path
          required: true
          description: Идентификатор игрушки
          schema:
            type: string
      responses:
        '200':
          "description": Успешное удаление
          content:
            'application/json': { }
        default:
          description: Любая неожиданная ошибка
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  schemas:
    todo-lists:
      type: object
      required:
        - id
        - addedDate
        - order
        - title
      properties:
        id:
          type: string
          example: 9f27f97b-bc63-4114-9baa-c91facbd4ffb
        title:
          description: Название todo
          type: string
          example: what todo
        addedDate:
          type: datetime
          example: 2019-07-30T12:24:15.063
        order:
            type: number
            example: 2019-07-30T12:24:15.063

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string